// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	privregistry "github.com/ergomake/ergomake/internal/privregistry"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PrivRegistryProvider is an autogenerated mock type for the PrivRegistryProvider type
type PrivRegistryProvider struct {
	mock.Mock
}

type PrivRegistryProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *PrivRegistryProvider) EXPECT() *PrivRegistryProvider_Expecter {
	return &PrivRegistryProvider_Expecter{mock: &_m.Mock}
}

// DeleteRegistry provides a mock function with given fields: ctx, id
func (_m *PrivRegistryProvider) DeleteRegistry(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrivRegistryProvider_DeleteRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRegistry'
type PrivRegistryProvider_DeleteRegistry_Call struct {
	*mock.Call
}

// DeleteRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PrivRegistryProvider_Expecter) DeleteRegistry(ctx interface{}, id interface{}) *PrivRegistryProvider_DeleteRegistry_Call {
	return &PrivRegistryProvider_DeleteRegistry_Call{Call: _e.mock.On("DeleteRegistry", ctx, id)}
}

func (_c *PrivRegistryProvider_DeleteRegistry_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PrivRegistryProvider_DeleteRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PrivRegistryProvider_DeleteRegistry_Call) Return(_a0 error) *PrivRegistryProvider_DeleteRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PrivRegistryProvider_DeleteRegistry_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *PrivRegistryProvider_DeleteRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// FetchCreds provides a mock function with given fields: ctx, owner, image
func (_m *PrivRegistryProvider) FetchCreds(ctx context.Context, owner string, image string) (*privregistry.RegistryCreds, error) {
	ret := _m.Called(ctx, owner, image)

	var r0 *privregistry.RegistryCreds
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*privregistry.RegistryCreds, error)); ok {
		return rf(ctx, owner, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *privregistry.RegistryCreds); ok {
		r0 = rf(ctx, owner, image)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privregistry.RegistryCreds)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivRegistryProvider_FetchCreds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchCreds'
type PrivRegistryProvider_FetchCreds_Call struct {
	*mock.Call
}

// FetchCreds is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - image string
func (_e *PrivRegistryProvider_Expecter) FetchCreds(ctx interface{}, owner interface{}, image interface{}) *PrivRegistryProvider_FetchCreds_Call {
	return &PrivRegistryProvider_FetchCreds_Call{Call: _e.mock.On("FetchCreds", ctx, owner, image)}
}

func (_c *PrivRegistryProvider_FetchCreds_Call) Run(run func(ctx context.Context, owner string, image string)) *PrivRegistryProvider_FetchCreds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PrivRegistryProvider_FetchCreds_Call) Return(_a0 *privregistry.RegistryCreds, _a1 error) *PrivRegistryProvider_FetchCreds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PrivRegistryProvider_FetchCreds_Call) RunAndReturn(run func(context.Context, string, string) (*privregistry.RegistryCreds, error)) *PrivRegistryProvider_FetchCreds_Call {
	_c.Call.Return(run)
	return _c
}

// ListCredsByOwner provides a mock function with given fields: ctx, owner, skipToken
func (_m *PrivRegistryProvider) ListCredsByOwner(ctx context.Context, owner string, skipToken bool) ([]privregistry.RegistryCreds, error) {
	ret := _m.Called(ctx, owner, skipToken)

	var r0 []privregistry.RegistryCreds
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) ([]privregistry.RegistryCreds, error)); ok {
		return rf(ctx, owner, skipToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) []privregistry.RegistryCreds); ok {
		r0 = rf(ctx, owner, skipToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]privregistry.RegistryCreds)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, owner, skipToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PrivRegistryProvider_ListCredsByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCredsByOwner'
type PrivRegistryProvider_ListCredsByOwner_Call struct {
	*mock.Call
}

// ListCredsByOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - skipToken bool
func (_e *PrivRegistryProvider_Expecter) ListCredsByOwner(ctx interface{}, owner interface{}, skipToken interface{}) *PrivRegistryProvider_ListCredsByOwner_Call {
	return &PrivRegistryProvider_ListCredsByOwner_Call{Call: _e.mock.On("ListCredsByOwner", ctx, owner, skipToken)}
}

func (_c *PrivRegistryProvider_ListCredsByOwner_Call) Run(run func(ctx context.Context, owner string, skipToken bool)) *PrivRegistryProvider_ListCredsByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *PrivRegistryProvider_ListCredsByOwner_Call) Return(_a0 []privregistry.RegistryCreds, _a1 error) *PrivRegistryProvider_ListCredsByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PrivRegistryProvider_ListCredsByOwner_Call) RunAndReturn(run func(context.Context, string, bool) ([]privregistry.RegistryCreds, error)) *PrivRegistryProvider_ListCredsByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// StoreRegistry provides a mock function with given fields: ctx, owner, url, provider, credentials
func (_m *PrivRegistryProvider) StoreRegistry(ctx context.Context, owner string, url string, provider string, credentials string) error {
	ret := _m.Called(ctx, owner, url, provider, credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, owner, url, provider, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PrivRegistryProvider_StoreRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreRegistry'
type PrivRegistryProvider_StoreRegistry_Call struct {
	*mock.Call
}

// StoreRegistry is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - url string
//   - provider string
//   - credentials string
func (_e *PrivRegistryProvider_Expecter) StoreRegistry(ctx interface{}, owner interface{}, url interface{}, provider interface{}, credentials interface{}) *PrivRegistryProvider_StoreRegistry_Call {
	return &PrivRegistryProvider_StoreRegistry_Call{Call: _e.mock.On("StoreRegistry", ctx, owner, url, provider, credentials)}
}

func (_c *PrivRegistryProvider_StoreRegistry_Call) Run(run func(ctx context.Context, owner string, url string, provider string, credentials string)) *PrivRegistryProvider_StoreRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *PrivRegistryProvider_StoreRegistry_Call) Return(_a0 error) *PrivRegistryProvider_StoreRegistry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PrivRegistryProvider_StoreRegistry_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *PrivRegistryProvider_StoreRegistry_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPrivRegistryProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrivRegistryProvider creates a new instance of PrivRegistryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrivRegistryProvider(t mockConstructorTestingTNewPrivRegistryProvider) *PrivRegistryProvider {
	mock := &PrivRegistryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
