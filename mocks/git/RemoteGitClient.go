// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RemoteGitClient is an autogenerated mock type for the RemoteGitClient type
type RemoteGitClient struct {
	mock.Mock
}

type RemoteGitClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RemoteGitClient) EXPECT() *RemoteGitClient_Expecter {
	return &RemoteGitClient_Expecter{mock: &_m.Mock}
}

// CloneRepo provides a mock function with given fields: ctx, owner, repo, branch, dir
func (_m *RemoteGitClient) CloneRepo(ctx context.Context, owner string, repo string, branch string, dir string) error {
	ret := _m.Called(ctx, owner, repo, branch, dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, owner, repo, branch, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoteGitClient_CloneRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneRepo'
type RemoteGitClient_CloneRepo_Call struct {
	*mock.Call
}

// CloneRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - branch string
//   - dir string
func (_e *RemoteGitClient_Expecter) CloneRepo(ctx interface{}, owner interface{}, repo interface{}, branch interface{}, dir interface{}) *RemoteGitClient_CloneRepo_Call {
	return &RemoteGitClient_CloneRepo_Call{Call: _e.mock.On("CloneRepo", ctx, owner, repo, branch, dir)}
}

func (_c *RemoteGitClient_CloneRepo_Call) Run(run func(ctx context.Context, owner string, repo string, branch string, dir string)) *RemoteGitClient_CloneRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *RemoteGitClient_CloneRepo_Call) Return(_a0 error) *RemoteGitClient_CloneRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteGitClient_CloneRepo_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *RemoteGitClient_CloneRepo_Call {
	_c.Call.Return(run)
	return _c
}

// DoesBranchExist provides a mock function with given fields: ctx, owner, repo, branch
func (_m *RemoteGitClient) DoesBranchExist(ctx context.Context, owner string, repo string, branch string) (bool, error) {
	ret := _m.Called(ctx, owner, repo, branch)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (bool, error)); ok {
		return rf(ctx, owner, repo, branch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) bool); ok {
		r0 = rf(ctx, owner, repo, branch)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, owner, repo, branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteGitClient_DoesBranchExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DoesBranchExist'
type RemoteGitClient_DoesBranchExist_Call struct {
	*mock.Call
}

// DoesBranchExist is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - branch string
func (_e *RemoteGitClient_Expecter) DoesBranchExist(ctx interface{}, owner interface{}, repo interface{}, branch interface{}) *RemoteGitClient_DoesBranchExist_Call {
	return &RemoteGitClient_DoesBranchExist_Call{Call: _e.mock.On("DoesBranchExist", ctx, owner, repo, branch)}
}

func (_c *RemoteGitClient_DoesBranchExist_Call) Run(run func(ctx context.Context, owner string, repo string, branch string)) *RemoteGitClient_DoesBranchExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *RemoteGitClient_DoesBranchExist_Call) Return(_a0 bool, _a1 error) *RemoteGitClient_DoesBranchExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteGitClient_DoesBranchExist_Call) RunAndReturn(run func(context.Context, string, string, string) (bool, error)) *RemoteGitClient_DoesBranchExist_Call {
	_c.Call.Return(run)
	return _c
}

// GetCloneParams provides a mock function with given fields:
func (_m *RemoteGitClient) GetCloneParams() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// RemoteGitClient_GetCloneParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCloneParams'
type RemoteGitClient_GetCloneParams_Call struct {
	*mock.Call
}

// GetCloneParams is a helper method to define mock.On call
func (_e *RemoteGitClient_Expecter) GetCloneParams() *RemoteGitClient_GetCloneParams_Call {
	return &RemoteGitClient_GetCloneParams_Call{Call: _e.mock.On("GetCloneParams")}
}

func (_c *RemoteGitClient_GetCloneParams_Call) Run(run func()) *RemoteGitClient_GetCloneParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteGitClient_GetCloneParams_Call) Return(_a0 []string) *RemoteGitClient_GetCloneParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteGitClient_GetCloneParams_Call) RunAndReturn(run func() []string) *RemoteGitClient_GetCloneParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetCloneToken provides a mock function with given fields: ctx, owner, repo
func (_m *RemoteGitClient) GetCloneToken(ctx context.Context, owner string, repo string) (string, error) {
	ret := _m.Called(ctx, owner, repo)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, owner, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteGitClient_GetCloneToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCloneToken'
type RemoteGitClient_GetCloneToken_Call struct {
	*mock.Call
}

// GetCloneToken is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
func (_e *RemoteGitClient_Expecter) GetCloneToken(ctx interface{}, owner interface{}, repo interface{}) *RemoteGitClient_GetCloneToken_Call {
	return &RemoteGitClient_GetCloneToken_Call{Call: _e.mock.On("GetCloneToken", ctx, owner, repo)}
}

func (_c *RemoteGitClient_GetCloneToken_Call) Run(run func(ctx context.Context, owner string, repo string)) *RemoteGitClient_GetCloneToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RemoteGitClient_GetCloneToken_Call) Return(_a0 string, _a1 error) *RemoteGitClient_GetCloneToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteGitClient_GetCloneToken_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *RemoteGitClient_GetCloneToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetCloneUrl provides a mock function with given fields:
func (_m *RemoteGitClient) GetCloneUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RemoteGitClient_GetCloneUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCloneUrl'
type RemoteGitClient_GetCloneUrl_Call struct {
	*mock.Call
}

// GetCloneUrl is a helper method to define mock.On call
func (_e *RemoteGitClient_Expecter) GetCloneUrl() *RemoteGitClient_GetCloneUrl_Call {
	return &RemoteGitClient_GetCloneUrl_Call{Call: _e.mock.On("GetCloneUrl")}
}

func (_c *RemoteGitClient_GetCloneUrl_Call) Run(run func()) *RemoteGitClient_GetCloneUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RemoteGitClient_GetCloneUrl_Call) Return(_a0 string) *RemoteGitClient_GetCloneUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RemoteGitClient_GetCloneUrl_Call) RunAndReturn(run func() string) *RemoteGitClient_GetCloneUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultBranch provides a mock function with given fields: ctx, owner, repo
func (_m *RemoteGitClient) GetDefaultBranch(ctx context.Context, owner string, repo string) (string, error) {
	ret := _m.Called(ctx, owner, repo)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, owner, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoteGitClient_GetDefaultBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultBranch'
type RemoteGitClient_GetDefaultBranch_Call struct {
	*mock.Call
}

// GetDefaultBranch is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
func (_e *RemoteGitClient_Expecter) GetDefaultBranch(ctx interface{}, owner interface{}, repo interface{}) *RemoteGitClient_GetDefaultBranch_Call {
	return &RemoteGitClient_GetDefaultBranch_Call{Call: _e.mock.On("GetDefaultBranch", ctx, owner, repo)}
}

func (_c *RemoteGitClient_GetDefaultBranch_Call) Run(run func(ctx context.Context, owner string, repo string)) *RemoteGitClient_GetDefaultBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RemoteGitClient_GetDefaultBranch_Call) Return(_a0 string, _a1 error) *RemoteGitClient_GetDefaultBranch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RemoteGitClient_GetDefaultBranch_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *RemoteGitClient_GetDefaultBranch_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewRemoteGitClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewRemoteGitClient creates a new instance of RemoteGitClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRemoteGitClient(t mockConstructorTestingTNewRemoteGitClient) *RemoteGitClient {
	mock := &RemoteGitClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
