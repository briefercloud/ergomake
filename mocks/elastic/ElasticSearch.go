// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ElasticSearch is an autogenerated mock type for the ElasticSearch type
type ElasticSearch struct {
	mock.Mock
}

type ElasticSearch_Expecter struct {
	mock *mock.Mock
}

func (_m *ElasticSearch) EXPECT() *ElasticSearch_Expecter {
	return &ElasticSearch_Expecter{mock: &_m.Mock}
}

// Search provides a mock function with given fields: ctx, query, result
func (_m *ElasticSearch) Search(ctx context.Context, query interface{}, result interface{}) error {
	ret := _m.Called(ctx, query, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) error); ok {
		r0 = rf(ctx, query, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ElasticSearch_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type ElasticSearch_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - query interface{}
//   - result interface{}
func (_e *ElasticSearch_Expecter) Search(ctx interface{}, query interface{}, result interface{}) *ElasticSearch_Search_Call {
	return &ElasticSearch_Search_Call{Call: _e.mock.On("Search", ctx, query, result)}
}

func (_c *ElasticSearch_Search_Call) Run(run func(ctx context.Context, query interface{}, result interface{})) *ElasticSearch_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *ElasticSearch_Search_Call) Return(_a0 error) *ElasticSearch_Search_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ElasticSearch_Search_Call) RunAndReturn(run func(context.Context, interface{}, interface{}) error) *ElasticSearch_Search_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewElasticSearch interface {
	mock.TestingT
	Cleanup(func())
}

// NewElasticSearch creates a new instance of ElasticSearch. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewElasticSearch(t mockConstructorTestingTNewElasticSearch) *ElasticSearch {
	mock := &ElasticSearch{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
