// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	envvars "github.com/ergomake/ergomake/internal/envvars"
	mock "github.com/stretchr/testify/mock"
)

// EnvVarsProvider is an autogenerated mock type for the EnvVarsProvider type
type EnvVarsProvider struct {
	mock.Mock
}

type EnvVarsProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *EnvVarsProvider) EXPECT() *EnvVarsProvider_Expecter {
	return &EnvVarsProvider_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, owner, repo, name
func (_m *EnvVarsProvider) Delete(ctx context.Context, owner string, repo string, name string) error {
	ret := _m.Called(ctx, owner, repo, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, owner, repo, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnvVarsProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type EnvVarsProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - name string
func (_e *EnvVarsProvider_Expecter) Delete(ctx interface{}, owner interface{}, repo interface{}, name interface{}) *EnvVarsProvider_Delete_Call {
	return &EnvVarsProvider_Delete_Call{Call: _e.mock.On("Delete", ctx, owner, repo, name)}
}

func (_c *EnvVarsProvider_Delete_Call) Run(run func(ctx context.Context, owner string, repo string, name string)) *EnvVarsProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *EnvVarsProvider_Delete_Call) Return(_a0 error) *EnvVarsProvider_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EnvVarsProvider_Delete_Call) RunAndReturn(run func(context.Context, string, string, string) error) *EnvVarsProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ListByRepo provides a mock function with given fields: ctx, owner, repo
func (_m *EnvVarsProvider) ListByRepo(ctx context.Context, owner string, repo string) ([]envvars.EnvVar, error) {
	ret := _m.Called(ctx, owner, repo)

	var r0 []envvars.EnvVar
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]envvars.EnvVar, error)); ok {
		return rf(ctx, owner, repo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []envvars.EnvVar); ok {
		r0 = rf(ctx, owner, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]envvars.EnvVar)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, owner, repo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnvVarsProvider_ListByRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByRepo'
type EnvVarsProvider_ListByRepo_Call struct {
	*mock.Call
}

// ListByRepo is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
func (_e *EnvVarsProvider_Expecter) ListByRepo(ctx interface{}, owner interface{}, repo interface{}) *EnvVarsProvider_ListByRepo_Call {
	return &EnvVarsProvider_ListByRepo_Call{Call: _e.mock.On("ListByRepo", ctx, owner, repo)}
}

func (_c *EnvVarsProvider_ListByRepo_Call) Run(run func(ctx context.Context, owner string, repo string)) *EnvVarsProvider_ListByRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *EnvVarsProvider_ListByRepo_Call) Return(_a0 []envvars.EnvVar, _a1 error) *EnvVarsProvider_ListByRepo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EnvVarsProvider_ListByRepo_Call) RunAndReturn(run func(context.Context, string, string) ([]envvars.EnvVar, error)) *EnvVarsProvider_ListByRepo_Call {
	_c.Call.Return(run)
	return _c
}

// Upsert provides a mock function with given fields: ctx, owner, repo, name, value
func (_m *EnvVarsProvider) Upsert(ctx context.Context, owner string, repo string, name string, value string) error {
	ret := _m.Called(ctx, owner, repo, name, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, owner, repo, name, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnvVarsProvider_Upsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upsert'
type EnvVarsProvider_Upsert_Call struct {
	*mock.Call
}

// Upsert is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - repo string
//   - name string
//   - value string
func (_e *EnvVarsProvider_Expecter) Upsert(ctx interface{}, owner interface{}, repo interface{}, name interface{}, value interface{}) *EnvVarsProvider_Upsert_Call {
	return &EnvVarsProvider_Upsert_Call{Call: _e.mock.On("Upsert", ctx, owner, repo, name, value)}
}

func (_c *EnvVarsProvider_Upsert_Call) Run(run func(ctx context.Context, owner string, repo string, name string, value string)) *EnvVarsProvider_Upsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *EnvVarsProvider_Upsert_Call) Return(_a0 error) *EnvVarsProvider_Upsert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EnvVarsProvider_Upsert_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *EnvVarsProvider_Upsert_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewEnvVarsProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewEnvVarsProvider creates a new instance of EnvVarsProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEnvVarsProvider(t mockConstructorTestingTNewEnvVarsProvider) *EnvVarsProvider {
	mock := &EnvVarsProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
