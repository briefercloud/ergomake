// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/ergomake/ergomake/internal/database"
	mock "github.com/stretchr/testify/mock"

	servicelogs "github.com/ergomake/ergomake/internal/servicelogs"
)

// LogStreamer is an autogenerated mock type for the LogStreamer type
type LogStreamer struct {
	mock.Mock
}

type LogStreamer_Expecter struct {
	mock *mock.Mock
}

func (_m *LogStreamer) EXPECT() *LogStreamer_Expecter {
	return &LogStreamer_Expecter{mock: &_m.Mock}
}

// Stream provides a mock function with given fields: ctx, services, namespace, logChan, errChan
func (_m *LogStreamer) Stream(ctx context.Context, services []database.Service, namespace string, logChan chan<- []servicelogs.LogEntry, errChan chan<- error) {
	_m.Called(ctx, services, namespace, logChan, errChan)
}

// LogStreamer_Stream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stream'
type LogStreamer_Stream_Call struct {
	*mock.Call
}

// Stream is a helper method to define mock.On call
//   - ctx context.Context
//   - services []database.Service
//   - namespace string
//   - logChan chan<- []servicelogs.LogEntry
//   - errChan chan<- error
func (_e *LogStreamer_Expecter) Stream(ctx interface{}, services interface{}, namespace interface{}, logChan interface{}, errChan interface{}) *LogStreamer_Stream_Call {
	return &LogStreamer_Stream_Call{Call: _e.mock.On("Stream", ctx, services, namespace, logChan, errChan)}
}

func (_c *LogStreamer_Stream_Call) Run(run func(ctx context.Context, services []database.Service, namespace string, logChan chan<- []servicelogs.LogEntry, errChan chan<- error)) *LogStreamer_Stream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]database.Service), args[2].(string), args[3].(chan<- []servicelogs.LogEntry), args[4].(chan<- error))
	})
	return _c
}

func (_c *LogStreamer_Stream_Call) Return() *LogStreamer_Stream_Call {
	_c.Call.Return()
	return _c
}

func (_c *LogStreamer_Stream_Call) RunAndReturn(run func(context.Context, []database.Service, string, chan<- []servicelogs.LogEntry, chan<- error)) *LogStreamer_Stream_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewLogStreamer interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogStreamer creates a new instance of LogStreamer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogStreamer(t mockConstructorTestingTNewLogStreamer) *LogStreamer {
	mock := &LogStreamer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
