// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Starter is an autogenerated mock type for the Starter type
type Starter struct {
	mock.Mock
}

type Starter_Expecter struct {
	mock *mock.Mock
}

func (_m *Starter) EXPECT() *Starter_Expecter {
	return &Starter_Expecter{mock: &_m.Mock}
}

// Start provides a mock function with given fields: stopCh
func (_m *Starter) Start(stopCh <-chan struct{}) {
	_m.Called(stopCh)
}

// Starter_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Starter_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - stopCh <-chan struct{}
func (_e *Starter_Expecter) Start(stopCh interface{}) *Starter_Start_Call {
	return &Starter_Start_Call{Call: _e.mock.On("Start", stopCh)}
}

func (_c *Starter_Start_Call) Run(run func(stopCh <-chan struct{})) *Starter_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(<-chan struct{}))
	})
	return _c
}

func (_c *Starter_Start_Call) Return() *Starter_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *Starter_Start_Call) RunAndReturn(run func(<-chan struct{})) *Starter_Start_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewStarter interface {
	mock.TestingT
	Cleanup(func())
}

// NewStarter creates a new instance of Starter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStarter(t mockConstructorTestingTNewStarter) *Starter {
	mock := &Starter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
