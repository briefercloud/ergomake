// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	ghlauncher "github.com/ergomake/ergomake/internal/github/ghlauncher"
	mock "github.com/stretchr/testify/mock"
)

// GHLauncher is an autogenerated mock type for the GHLauncher type
type GHLauncher struct {
	mock.Mock
}

type GHLauncher_Expecter struct {
	mock *mock.Mock
}

func (_m *GHLauncher) EXPECT() *GHLauncher_Expecter {
	return &GHLauncher_Expecter{mock: &_m.Mock}
}

// LaunchEnvironment provides a mock function with given fields: ctx, req
func (_m *GHLauncher) LaunchEnvironment(ctx context.Context, req ghlauncher.LaunchEnvironmentRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ghlauncher.LaunchEnvironmentRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GHLauncher_LaunchEnvironment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LaunchEnvironment'
type GHLauncher_LaunchEnvironment_Call struct {
	*mock.Call
}

// LaunchEnvironment is a helper method to define mock.On call
//   - ctx context.Context
//   - req ghlauncher.LaunchEnvironmentRequest
func (_e *GHLauncher_Expecter) LaunchEnvironment(ctx interface{}, req interface{}) *GHLauncher_LaunchEnvironment_Call {
	return &GHLauncher_LaunchEnvironment_Call{Call: _e.mock.On("LaunchEnvironment", ctx, req)}
}

func (_c *GHLauncher_LaunchEnvironment_Call) Run(run func(ctx context.Context, req ghlauncher.LaunchEnvironmentRequest)) *GHLauncher_LaunchEnvironment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ghlauncher.LaunchEnvironmentRequest))
	})
	return _c
}

func (_c *GHLauncher_LaunchEnvironment_Call) Return(_a0 error) *GHLauncher_LaunchEnvironment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GHLauncher_LaunchEnvironment_Call) RunAndReturn(run func(context.Context, ghlauncher.LaunchEnvironmentRequest) error) *GHLauncher_LaunchEnvironment_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGHLauncher interface {
	mock.TestingT
	Cleanup(func())
}

// NewGHLauncher creates a new instance of GHLauncher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGHLauncher(t mockConstructorTestingTNewGHLauncher) *GHLauncher {
	mock := &GHLauncher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
