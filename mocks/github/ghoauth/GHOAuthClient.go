// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/v52/github"

	mock "github.com/stretchr/testify/mock"
)

// GHOAuthClient is an autogenerated mock type for the GHOAuthClient type
type GHOAuthClient struct {
	mock.Mock
}

type GHOAuthClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GHOAuthClient) EXPECT() *GHOAuthClient_Expecter {
	return &GHOAuthClient_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx
func (_m *GHOAuthClient) GetUser(ctx context.Context) (*github.User, *github.Response, error) {
	ret := _m.Called(ctx)

	var r0 *github.User
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*github.User, *github.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *github.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *github.Response); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GHOAuthClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type GHOAuthClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GHOAuthClient_Expecter) GetUser(ctx interface{}) *GHOAuthClient_GetUser_Call {
	return &GHOAuthClient_GetUser_Call{Call: _e.mock.On("GetUser", ctx)}
}

func (_c *GHOAuthClient_GetUser_Call) Run(run func(ctx context.Context)) *GHOAuthClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GHOAuthClient_GetUser_Call) Return(_a0 *github.User, _a1 *github.Response, _a2 error) *GHOAuthClient_GetUser_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GHOAuthClient_GetUser_Call) RunAndReturn(run func(context.Context) (*github.User, *github.Response, error)) *GHOAuthClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizations provides a mock function with given fields: ctx
func (_m *GHOAuthClient) ListOrganizations(ctx context.Context) ([]*github.Organization, *github.Response, error) {
	ret := _m.Called(ctx)

	var r0 []*github.Organization
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*github.Organization, *github.Response, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*github.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Organization)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) *github.Response); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GHOAuthClient_ListOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizations'
type GHOAuthClient_ListOrganizations_Call struct {
	*mock.Call
}

// ListOrganizations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GHOAuthClient_Expecter) ListOrganizations(ctx interface{}) *GHOAuthClient_ListOrganizations_Call {
	return &GHOAuthClient_ListOrganizations_Call{Call: _e.mock.On("ListOrganizations", ctx)}
}

func (_c *GHOAuthClient_ListOrganizations_Call) Run(run func(ctx context.Context)) *GHOAuthClient_ListOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GHOAuthClient_ListOrganizations_Call) Return(_a0 []*github.Organization, _a1 *github.Response, _a2 error) *GHOAuthClient_ListOrganizations_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GHOAuthClient_ListOrganizations_Call) RunAndReturn(run func(context.Context) ([]*github.Organization, *github.Response, error)) *GHOAuthClient_ListOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// ListOwnerRepos provides a mock function with given fields: ctx, owner
func (_m *GHOAuthClient) ListOwnerRepos(ctx context.Context, owner string) ([]*github.Repository, error) {
	ret := _m.Called(ctx, owner)

	var r0 []*github.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*github.Repository, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*github.Repository); ok {
		r0 = rf(ctx, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GHOAuthClient_ListOwnerRepos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOwnerRepos'
type GHOAuthClient_ListOwnerRepos_Call struct {
	*mock.Call
}

// ListOwnerRepos is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
func (_e *GHOAuthClient_Expecter) ListOwnerRepos(ctx interface{}, owner interface{}) *GHOAuthClient_ListOwnerRepos_Call {
	return &GHOAuthClient_ListOwnerRepos_Call{Call: _e.mock.On("ListOwnerRepos", ctx, owner)}
}

func (_c *GHOAuthClient_ListOwnerRepos_Call) Run(run func(ctx context.Context, owner string)) *GHOAuthClient_ListOwnerRepos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GHOAuthClient_ListOwnerRepos_Call) Return(_a0 []*github.Repository, _a1 error) *GHOAuthClient_ListOwnerRepos_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GHOAuthClient_ListOwnerRepos_Call) RunAndReturn(run func(context.Context, string) ([]*github.Repository, error)) *GHOAuthClient_ListOwnerRepos_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGHOAuthClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGHOAuthClient creates a new instance of GHOAuthClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGHOAuthClient(t mockConstructorTestingTNewGHOAuthClient) *GHOAuthClient {
	mock := &GHOAuthClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
