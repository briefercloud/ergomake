// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	payment "github.com/ergomake/ergomake/internal/payment"
	mock "github.com/stretchr/testify/mock"
)

// PaymentProvider is an autogenerated mock type for the PaymentProvider type
type PaymentProvider struct {
	mock.Mock
}

type PaymentProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentProvider) EXPECT() *PaymentProvider_Expecter {
	return &PaymentProvider_Expecter{mock: &_m.Mock}
}

// GetOwnerPlan provides a mock function with given fields: ctx, owner
func (_m *PaymentProvider) GetOwnerPlan(ctx context.Context, owner string) (payment.PaymentPlan, error) {
	ret := _m.Called(ctx, owner)

	var r0 payment.PaymentPlan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (payment.PaymentPlan, error)); ok {
		return rf(ctx, owner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) payment.PaymentPlan); ok {
		r0 = rf(ctx, owner)
	} else {
		r0 = ret.Get(0).(payment.PaymentPlan)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentProvider_GetOwnerPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwnerPlan'
type PaymentProvider_GetOwnerPlan_Call struct {
	*mock.Call
}

// GetOwnerPlan is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
func (_e *PaymentProvider_Expecter) GetOwnerPlan(ctx interface{}, owner interface{}) *PaymentProvider_GetOwnerPlan_Call {
	return &PaymentProvider_GetOwnerPlan_Call{Call: _e.mock.On("GetOwnerPlan", ctx, owner)}
}

func (_c *PaymentProvider_GetOwnerPlan_Call) Run(run func(ctx context.Context, owner string)) *PaymentProvider_GetOwnerPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PaymentProvider_GetOwnerPlan_Call) Return(_a0 payment.PaymentPlan, _a1 error) *PaymentProvider_GetOwnerPlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentProvider_GetOwnerPlan_Call) RunAndReturn(run func(context.Context, string) (payment.PaymentPlan, error)) *PaymentProvider_GetOwnerPlan_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSubscription provides a mock function with given fields: ctx, owner, subscriptionID
func (_m *PaymentProvider) SaveSubscription(ctx context.Context, owner string, subscriptionID string) error {
	ret := _m.Called(ctx, owner, subscriptionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, owner, subscriptionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentProvider_SaveSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSubscription'
type PaymentProvider_SaveSubscription_Call struct {
	*mock.Call
}

// SaveSubscription is a helper method to define mock.On call
//   - ctx context.Context
//   - owner string
//   - subscriptionID string
func (_e *PaymentProvider_Expecter) SaveSubscription(ctx interface{}, owner interface{}, subscriptionID interface{}) *PaymentProvider_SaveSubscription_Call {
	return &PaymentProvider_SaveSubscription_Call{Call: _e.mock.On("SaveSubscription", ctx, owner, subscriptionID)}
}

func (_c *PaymentProvider_SaveSubscription_Call) Run(run func(ctx context.Context, owner string, subscriptionID string)) *PaymentProvider_SaveSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PaymentProvider_SaveSubscription_Call) Return(_a0 error) *PaymentProvider_SaveSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentProvider_SaveSubscription_Call) RunAndReturn(run func(context.Context, string, string) error) *PaymentProvider_SaveSubscription_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewPaymentProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentProvider creates a new instance of PaymentProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentProvider(t mockConstructorTestingTNewPaymentProvider) *PaymentProvider {
	mock := &PaymentProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
